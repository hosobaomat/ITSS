import 'package:login_menu/models/foodCatalogResponse.dart';
import 'package:login_menu/models/foodCategoryResponse.dart';
import 'package:login_menu/models/getGroupMember.dart';
import 'package:login_menu/models/getMealPlan.dart';
import 'package:login_menu/models/recipesResponse.dart';
import 'package:login_menu/models/unitResponse.dart';
import 'package:login_menu/service/auth_service.dart';

class Recipe {
  String name;
  List<String> ingredients;
  String instruction;

  Recipe(
      {required this.name,
      required this.ingredients,
      required this.instruction});
}

class DataStore {
  //
  // Singleton pattern
  static final DataStore _instance = DataStore._internal();
  factory DataStore() => _instance;
  DataStore._internal();
  // C√°c bi·∫øn l∆∞u tr·ªØ d·ªØ li·ªáu d√πng chung
  List<FoodCategoryResponse> categories = [];
  List<FoodCatalogResponse> foodCatalogs = [];
  List<UnitResponse> units = [];
  late int? userId; // ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
  List<Recipesresponse> recipesresponse = [];
  List<Recipesresponse> recipesSuggest = [];
  late AuthService authService;
  late int GroupID = 0;
  late int UserID = 0;
  List<MealPlanResponse> mealPlanResponse = [];
  late String username = '';
  late String email = '';
  late String url = 'http://192.168.100.19:8082/ITSS_BE';
  late int userCreateID = 0;
  late int groupcreatID = 0;
  late String tokenSignup = '';
  // H√†m clear n·∫øu c·∫ßn reset
  void clearAll() {
    categories = [];
    foodCatalogs = [];
    units = [];
    recipesresponse = [];
    mealPlanResponse = [];
    recipesSuggest = [];
  }

  //
  static final Map<String, List<String>> itemsByCategory = {
    'Vegetables': ['Carrot', 'Broccoli', 'Lettuce', 'Spinach'],
    'Fruits': ['Apple', 'Banana', 'Orange', 'Grape'],
    'Beverages': ['Water', 'Juice', 'Soda', 'Milk'],
    'Snacks': ['Chips', 'Cookies', 'Popcorn', 'Candy'],
  };

  static final List<Recipe> recipes = [
    Recipe(
        name: 'Ph·ªü b√≤',
        ingredients: ['Th·ªãt b√≤', 'B√°nh ph·ªü', 'H√†nh', 'G·ª´ng', 'N∆∞·ªõc d√πng'],
        instruction: 'https://hocmonviet.edu.vn/khoa-hoc-nau-pho-bo/'),
    Recipe(
        name: 'C∆°m rang',
        ingredients: ['C∆°m ngu·ªôi', 'Tr·ª©ng', 'H√†nh l√°', 'D·∫ßu ƒÉn'],
        instruction:
            'B∆∞·ªõc 1: Chu·∫©n b·ªã nguy√™n li·ªáu.\nB∆∞·ªõc 2: N·∫•u theo c√°ch b·∫°n mu·ªën.'),
    // üå∂Ô∏è X√†o
    Recipe(
        name: 'Rau mu·ªëng x√†o t·ªèi',
        ingredients: ['Rau mu·ªëng', 'T·ªèi', 'D·∫ßu ƒÉn', 'Mu·ªëi'],
        instruction:
            'B∆∞·ªõc 1: Chu·∫©n b·ªã nguy√™n li·ªáu.\nB∆∞·ªõc 2: N·∫•u theo c√°ch b·∫°n mu·ªën.'),
    // üçñ N∆∞·ªõng
    Recipe(
        name: 'G√† n∆∞·ªõng m·∫≠t ong',
        ingredients: ['ƒê√πi g√†', 'M·∫≠t ong', 'T·ªèi', 'N∆∞·ªõc m·∫Øm', 'Ti√™u'],
        instruction:
            'B∆∞·ªõc 1: Chu·∫©n b·ªã nguy√™n li·ªáu.\nB∆∞·ªõc 2: N·∫•u theo c√°ch b·∫°n mu·ªën.'),
    // ü•© √Åp ch·∫£o (B√≠t t·∫øt)
    Recipe(
        name: 'B√≠t t·∫øt b√≤',
        ingredients: ['Th·ªãt b√≤', 'Mu·ªëi', 'Ti√™u', 'B∆°', 'T·ªèi'],
        instruction:
            'B∆∞·ªõc 1: Chu·∫©n b·ªã nguy√™n li·ªáu.\nB∆∞·ªõc 2: N·∫•u theo c√°ch b·∫°n mu·ªën.'),
    // ü•£ Lu·ªôc
    Recipe(
        name: 'Tr·ª©ng lu·ªôc',
        ingredients: ['Tr·ª©ng', 'N∆∞·ªõc', 'Mu·ªëi'],
        instruction:
            'B∆∞·ªõc 1: Chu·∫©n b·ªã nguy√™n li·ªáu.\nB∆∞·ªõc 2: N·∫•u theo c√°ch b·∫°n mu·ªën.'),
  ];
}
